---
import { t } from "../../i18n/utils";
const { lang, filter = "all" } = Astro.props;
const base = "/dgklogistics-preview";

const images = [
    {
        id: 1,
        src: `${base}/images/image1.jpeg`,
        alt: t(lang, "gallery.images.truck.road"),
        category: "transport",
    },
    {
        id: 2,
        src: `${base}/images/image2.jpeg`,
        alt: t(lang, "gallery.images.truck.refrigerated"),
        category: "transport",
    },
    {
        id: 3,
        src: `${base}/images/image3.jpeg`,
        alt: t(lang, "gallery.images.fleet"),
        category: "transport",
    },
    {
        id: 4,
        src: `${base}/images/image4.jpeg`,
        alt: t(lang, "gallery.images.truck.transport"),
        category: "transport",
    },
    {
        id: 5,
        src: `${base}/images/image5.jpeg`,
        alt: t(lang, "gallery.images.truck.motion"),
        category: "transport",
    },
    {
        id: 6,
        src: `${base}/images/image6.jpeg`,
        alt: t(lang, "gallery.images.transport.refrigerated"),
        category: "transport",
    },
    {
        id: 7,
        src: `${base}/images/image7.jpeg`,
        alt: t(lang, "gallery.images.container.operations"),
        category: "kontenery",
    },
    {
        id: 8,
        src: `${base}/images/image8.jpeg`,
        alt: t(lang, "gallery.images.container.terminal"),
        category: "kontenery",
    },
    {
        id: 9,
        src: `${base}/images/image9.jpeg`,
        alt: t(lang, "gallery.images.container.loading"),
        category: "kontenery",
    },
    {
        id: 10,
        src: `${base}/images/image10.jpeg`,
        alt: t(lang, "gallery.images.container.warehouse"),
        category: "kontenery",
    },
    {
        id: 11,
        src: `${base}/images/image11.jpeg`,
        alt: t(lang, "gallery.images.container.handling"),
        category: "kontenery",
    },
    {
        id: 12,
        src: `${base}/images/image12.jpeg`,
        alt: t(lang, "gallery.images.container.port"),
        category: "kontenery",
    },
    {
        id: 13,
        src: `${base}/images/image13.jpeg`,
        alt: t(lang, "gallery.images.container.logistics"),
        category: "kontenery",
    },
    {
        id: 14,
        src: `${base}/images/image14.jpeg`,
        alt: t(lang, "gallery.images.loading.fresh"),
        category: "zaladunki",
    },
    {
        id: 15,
        src: `${base}/images/image15.jpeg`,
        alt: t(lang, "gallery.images.loading.process"),
        category: "zaladunki",
    },
    {
        id: 16,
        src: `${base}/images/image16.jpeg`,
        alt: t(lang, "gallery.images.loading.driver"),
        category: "zaladunki",
    },
    {
        id: 17,
        src: `${base}/images/image17.jpeg`,
        alt: t(lang, "gallery.images.loading.preparation"),
        category: "zaladunki",
    },
    {
        id: 18,
        src: `${base}/images/image18.jpeg`,
        alt: t(lang, "gallery.images.loading.securing"),
        category: "zaladunki",
    },
    {
        id: 19,
        src: `${base}/images/image19.jpeg`,
        alt: t(lang, "gallery.images.loading.quality"),
        category: "zaladunki",
    },
    {
        id: 20,
        src: `${base}/images/image20.jpeg`,
        alt: t(lang, "gallery.images.loading.finalization"),
        category: "zaladunki",
    },
    {
        id: 21,
        src: `${base}/images/image21.jpeg`,
        alt: t(lang, "gallery.images.loading.team"),
        category: "zaladunki",
    },
];

const categories = [
    { key: "all", label: t(lang, "gallery.all") },
    { key: "transport", label: t(lang, "gallery.transport") },
    { key: "kontenery", label: t(lang, "gallery.containers") },
    { key: "zaladunki", label: t(lang, "gallery.loads") },
];

const filteredImages =
    filter === "all" ? images : images.filter((img) => img.category === filter);

console.log(
    "Filtered images count:",
    filteredImages.length,
    "for filter:",
    filter,
);
---

<section id="gallery" class="bg-white text-primary-700 py-16 px-6 md:px-12">
    <div class="absolute inset-0 opacity-5">
        <div
            class="absolute top-1/4 left-1/4 w-64 h-64 bg-accent-500 rounded-full blur-3xl"
        >
        </div>
        <div
            class="absolute bottom-1/4 right-1/4 w-64 h-64 bg-accent-500 rounded-full blur-3xl"
        >
        </div>
    </div>

    <div class="max-w-7xl mx-auto relative z-10">
        <div class="text-center mb-16 fade-in">
            <h2
                class="text-4xl font-bold mb-6 text-center border-b border-text-primary-700 pb-4"
            >
                {t(lang, "nav.gallery")}
            </h2>
            <p class="text-lg md:text-xl text-primary-700 max-w-3xl mx-auto">
                {t(lang, "gallery.description")}
            </p>
        </div>

        <div class="flex flex-wrap gap-4 justify-center mb-12">
            {
                categories.map((cat) => (
                    <button
                        data-filter={cat.key}
                        class={`filter-btn px-6 py-3 rounded-lg font-medium transition-all duration-300 ${
                            filter === cat.key
                                ? "bg-accent-500 text-white shadow-md"
                                : "bg-white text-primary-700 border border-neutral-200 hover:bg-neutral-50 hover:border-accent-500"
                        } focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-opacity-50`}
                    >
                        {cat.label}
                    </button>
                ))
            }
        </div>

        <!-- Gallery Grid -->
        <div
            class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 md:gap-8"
            id="gallery-grid"
        >
            {
                images.map((img, index) => (
                    <figure
                        class="gallery-item group relative overflow-hidden rounded-xl shadow-md hover:shadow-xl transition-all duration-500 bg-white border border-neutral-200"
                        data-category={img.category}
                        style={`animation-delay: ${index * 0.1}s`}
                    >
                        <div class="relative overflow-hidden aspect-[4/3]">
                            <img
                                src={img.src}
                                alt={img.alt}
                                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
                                loading="lazy"
                            />
                            <div class="absolute inset-0 bg-gradient-to-t from-primary-900/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />

                            <button class="zoom-button absolute top-4 right-4 w-10 h-10 bg-white rounded-lg shadow-md flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0 cursor-pointer">
                                <svg
                                    class="w-5 h-5 text-accent-500"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                                    />
                                </svg>
                            </button>
                        </div>

                        <figcaption class="p-4 border-t border-neutral-100">
                            <h3 class="font-medium text-primary-900 group-hover:text-accent-500 transition-colors duration-300">
                                {img.alt}
                            </h3>
                            <div class="w-full h-0.5 bg-neutral-100 rounded-full mt-3 overflow-hidden">
                                <div class="h-full bg-accent-500 rounded-full transform -translate-x-full group-hover:translate-x-0 transition-transform duration-500" />
                            </div>
                        </figcaption>
                    </figure>
                ))
            }
        </div>
    </div>
</section>

<!-- Modal do wyświetlania zdjęć -->
<div
    id="imageModal"
    class="fixed inset-0 z-50 hidden items-center justify-center bg-black/90 opacity-0 transition-opacity duration-300"
>
    <button
        id="closeModal"
        class="absolute top-6 right-6 text-white hover:text-accent-500 transition-colors"
        aria-label={t(lang, "gallery.close")}
    >
        <svg
            class="w-8 h-8"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
        </svg>
    </button>

    <button
        id="prevImage"
        class="absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-accent-500 transition-colors"
        aria-label={t(lang, "gallery.prev")}
    >
        <svg
            class="w-10 h-10"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
        </svg>
    </button>

    <button
        id="nextImage"
        class="absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-accent-500 transition-colors"
        aria-label={t(lang, "gallery.next")}
    >
        <svg
            class="w-10 h-10"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
        </svg>
    </button>

    <div class="relative max-w-7xl mx-auto px-4">
        <figure
            class="transform transition-transform duration-300 scale-95 opacity-0"
            id="modalContent"
        >
            <img
                src=""
                alt=""
                class="max-h-[85vh] object-contain mx-auto rounded-lg shadow-2xl"
                id="modalImage"
            />
            <figcaption
                class="text-white text-center mt-4 text-lg opacity-75"
                id="modalCaption"
            >
            </figcaption>
        </figure>
    </div>
</div>

<style>
    .gallery-item {
        animation: fadeInUp 0.6s ease-out both;
    }

    .gallery-item.hidden {
        display: none;
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #imageModal.active {
        opacity: 1;
        display: flex;
    }

    #imageModal.active #modalContent {
        opacity: 1;
        transform: scale(1);
    }

    .modal-enter {
        animation: modalEnter 0.3s ease-out forwards;
    }

    .modal-exit {
        animation: modalExit 0.3s ease-out forwards;
    }

    @keyframes modalEnter {
        from {
            opacity: 0;
            transform: scale(0.95);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @keyframes modalExit {
        from {
            opacity: 1;
            transform: scale(1);
        }
        to {
            opacity: 0;
            transform: scale(0.95);
        }
    }
</style>

<script>
    function initGalleryFilter() {
        const filterButtons = document.querySelectorAll("[data-filter]");
        const galleryItems = document.querySelectorAll(".gallery-item");

        filterButtons.forEach((button) => {
            button.addEventListener("click", () => {
                const filter = button.getAttribute("data-filter");
                console.log("Clicked filter:", filter);
                filterButtons.forEach((btn) => {
                    if (btn !== button) {
                        btn.className =
                            "filter-btn px-6 py-3 rounded-lg font-medium transition-all duration-300 bg-white text-primary-700 border border-neutral-200 hover:bg-neutral-50 hover:border-accent-500";
                    }
                });

                button.className =
                    "filter-btn px-6 py-3 rounded-lg font-medium transition-all duration-300 bg-accent-500 text-white shadow-md";
                galleryItems.forEach((item, index) => {
                    const category = item.getAttribute("data-category");
                    console.log("Item category:", category, "Filter:", filter);

                    if (filter === "all" || category === filter) {
                        item.classList.remove("hidden");
                        (item as HTMLElement).style.animationDelay =
                            `${index * 0.01}s`;
                    } else {
                        item.classList.add("hidden");
                    }
                });
            });
        });
    }

    function initImageModal() {
        const modal = document.getElementById("imageModal");
        const modalImage = document.getElementById(
            "modalImage",
        ) as HTMLImageElement;
        const modalCaption = document.getElementById("modalCaption");
        const closeModal = document.getElementById("closeModal");
        const prevButton = document.getElementById("prevImage");
        const nextButton = document.getElementById("nextImage");
        const galleryItems = Array.from(
            document.querySelectorAll(".gallery-item"),
        );
        let currentImageIndex = 0;

        // Otwieranie modalu
        document.querySelectorAll(".gallery-item").forEach((item, index) => {
            const zoomButton = item.querySelector(".zoom-button");
            if (zoomButton) {
                zoomButton.addEventListener("click", (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    const img = item.querySelector("img") as HTMLImageElement;
                    const caption = item.querySelector("h3")?.textContent;
                    openModal(img.src, caption || "", index);
                });
            }
        });

        // Funkcja otwierająca modal
        function openModal(src: string, caption: string, index: number) {
            currentImageIndex = index;
            modalImage.src = src;
            modalCaption.textContent = caption;
            modal.classList.add("active");
            document.body.style.overflow = "hidden";
            updateNavigationButtons();
        }

        // Funkcja zamykająca modal
        function closeModalHandler() {
            modal.classList.remove("active");
            document.body.style.overflow = "";
            setTimeout(() => {
                modalImage.src = "";
            }, 300);
        }

        // Nawigacja między zdjęciami
        function showNextImage() {
            const visibleItems = galleryItems.filter(
                (item) => !item.classList.contains("hidden"),
            );
            currentImageIndex = (currentImageIndex + 1) % visibleItems.length;
            const nextItem = visibleItems[currentImageIndex];
            const img = nextItem.querySelector("img") as HTMLImageElement;
            const caption = nextItem.querySelector("h3")?.textContent;
            modalImage.classList.add("modal-exit");
            setTimeout(() => {
                modalImage.src = img.src;
                modalCaption.textContent = caption || "";
                modalImage.classList.remove("modal-exit");
                modalImage.classList.add("modal-enter");
                updateNavigationButtons();
            }, 300);
        }

        function showPrevImage() {
            const visibleItems = galleryItems.filter(
                (item) => !item.classList.contains("hidden"),
            );
            currentImageIndex =
                (currentImageIndex - 1 + visibleItems.length) %
                visibleItems.length;
            const prevItem = visibleItems[currentImageIndex];
            const img = prevItem.querySelector("img") as HTMLImageElement;
            const caption = prevItem.querySelector("h3")?.textContent;
            modalImage.classList.add("modal-exit");
            setTimeout(() => {
                modalImage.src = img.src;
                modalCaption.textContent = caption || "";
                modalImage.classList.remove("modal-exit");
                modalImage.classList.add("modal-enter");
                updateNavigationButtons();
            }, 300);
        }

        function updateNavigationButtons() {
            const visibleItems = galleryItems.filter(
                (item) => !item.classList.contains("hidden"),
            );
            prevButton.style.display =
                visibleItems.length > 1 ? "block" : "none";
            nextButton.style.display =
                visibleItems.length > 1 ? "block" : "none";
        }

        // Event listeners
        closeModal?.addEventListener("click", closeModalHandler);
        modal?.addEventListener("click", (e) => {
            if (e.target === modal) closeModalHandler();
        });
        nextButton?.addEventListener("click", showNextImage);
        prevButton?.addEventListener("click", showPrevImage);

        // Obsługa klawiszy
        document.addEventListener("keydown", (e) => {
            if (!modal.classList.contains("active")) return;
            if (e.key === "Escape") closeModalHandler();
            if (e.key === "ArrowRight") showNextImage();
            if (e.key === "ArrowLeft") showPrevImage();
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        initGalleryFilter();
        initImageModal();
    });
    document.addEventListener("astro:page-load", () => {
        initGalleryFilter();
        initImageModal();
    });
</script>
